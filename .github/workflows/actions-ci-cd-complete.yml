name: Build & Deploy to AKS with Terraform

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ dev ]

env:
  LOCATION: westeurope
  INFRA_RESOURCE_GROUP: tf-state-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage0101
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_ACCESS_KEY: "" # will be set later
    
  DOCKER_REPOSITORY: houssemdocker
  IMAGE_NAME: webapp
  IMAGE_TAG: $GITHUB_RUN_NUMBER # ${{ github.sha }}
  
  ARM_CLIENT_ID: ${{ secrets.AZURE_SP_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_SP_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:

  pre-build:
    name: Create storage for tfstate
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Create storage for tfstate
      uses: azure/CLI@v1
      with:
        azcliversion: 2.10.1
        inlineScript: |
          # Create the resource group
          az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION          
          # Create the storage account
          az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
            --name $TF_STATE_STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob
          # Retrieve the storage account key
          ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
          # Create a storage container (for the Terraform State)
          az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

          echo "::set-env name=TF_STATE_ACCESS_KEY::$ACCOUNT_KEY"

#  infra:
#    name: Create Infra with Terraform
#    runs-on: ubuntu-latest
#    needs: [pre-build]
#
#    steps:
#
#    - uses: actions/checkout@v2
      
    - name: Login to Azure as User
      uses: azure/CLI@v1
      with:
        azcliversion: 2.10.1
        inlineScript: |
          az login --service-principal -u ${{ secrets.AZURE_SP_CLIENT_ID }} -p ${{ secrets.AZURE_SP_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account list -o table
    
    - name: Replace Action
      uses: datamonsters/replace-action@v2
      with:
        files: infra/terraform.tfvars
        replacements: '__AKS_RESOURCE_GROUP__=aks-rg,__AKS_NAME__=aks-k8s,__ACR_NAME__=acrforaks01,__SQL_INSTANCE_NAME__=sqlforaks01,__DB_ADMIN_LOGIN__=houssem,__DB_ADMIN_PASSWORD__=@Aa123456,__STORAGE_NAME__=storageforaks01'

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.1
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      working-directory: infra
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init
             -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
             -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
             -backend-config="access_key=$TF_STATE_ACCESS_KEY"
             -backend-config="key=tfstate"
      working-directory: infra/
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: infra
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: infra
      continue-on-error: true
      
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: infra

#  build:
#    name: Build & Push Docker container
#    runs-on: ubuntu-latest
#    needs: [infra]
#        
#    steps:
#
#    - uses: actions/checkout@v2
          
    - name: Build Docker Image
      run:
        docker build ./MvcApp/ --file ./MvcApp/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER --build-arg=token=ZGEzNTQ5Y2QyNjAx --no-cache
    
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_REPOSITORY_PASSWORD }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
        
    - name: Push Image to Docker Hub
      run:
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER
        
    - name: Scan Docker Image using Trivy
      continue-on-error: true
      run:
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy --exit-code 0 --severity MEDIUM,HIGH,CRITICAL --ignore-unfixed $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER

#  deploy:
#    name: Deploy app into Kubernetes
#    runs-on: ubuntu-latest
#    needs: [build, infra]
#
#    steps:
#
#    - uses: actions/checkout@v2
      
    - name: Replace Action
      uses: datamonsters/replace-action@v2
      with:
        files: kubernetes/mvc-deployment.azure.yaml
        replacements: 'ACR_NAME=houssemdocker,DOCKER_IMAGE=webapp,TAG=$GITHUB_RUN_NUMBER'
        # replacements: 'ACR_NAME=acrforaks01,DOCKER_IMAGE=webapp,TAG=$GITHUB_RUN_NUMBER'

    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: aks-k8s
        resource-group: aks-rg

    - uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          kubernetes/mssql-pv.azure.yaml
          kubernetes/mssql-secret.yaml
          kubernetes/mssql-deployment.yaml
          kubernetes/mvc-deployment.azure.yaml
          kubernetes/mssql-configmap.yaml
     
    - name: Run Kube Advisor to check for Resource Limits
      continue-on-error: true
      run:
        kubectl run --rm -i -t kubeadvisor --image=mcr.microsoft.com/aks/kubeadvisor --restart=Never > PodResourceLimits.txt
