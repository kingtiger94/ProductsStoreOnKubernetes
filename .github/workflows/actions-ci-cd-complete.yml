name: Build & Deploy to AKS with Terraform

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ dev ]

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      LOCATION: westeurope
      INFRA_RESOURCE_GROUP: tf-state-resourcegroup
      TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage0101
      TF_STATE_CONTAINER_NAME: tfstate
      DOCKER_REPOSITORY: houssemdocker
      IMAGE_NAME: web-app
      IMAGE_TAG: $GITHUB_RUN_NUMBER # ${{ github.sha }}
      TF_VERSION: 0.13.1
    
    steps:

    - uses: actions/checkout@v2

    ########################

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Create storage for tfstate
      uses: azure/CLI@v1
      with:
        azcliversion: 2.10.1
        inlineScript: |
          az account list -o table
          # Create the resource group
          az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION          
          # Create the storage account
          az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
            --name $TF_STATE_STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob
          # Retrieve the storage account key
          ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
          # Create a storage container (for the Terraform State)
          az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

    #########################      
    - name: Build Docker Image
      run:
        docker build ./MvcApp/ --file ./MvcApp/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER --build-arg=token=ZGEzNTQ5Y2QyNjAx --no-cache
    
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_REPOSITORY_PASSWORD }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
        
    - name: Push Image to Docker Hub
      run:
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER
        
    - name: Scan Docker Image using Trivy
      continue-on-error: true
      run:
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy --exit-code 0 --severity MEDIUM,HIGH,CRITICAL --ignore-unfixed $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER

######################################

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: $TF_VERSION
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      working-directory: infra
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: infra/
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
    

######################################
    - name: 'Terraform Format'
      uses: hashicorp/terraform-github-actions@master  
      with:
         tf_actions_version: $TF_VERSION
         tf_actions_subcommand: 'fmt'
         tf_actions_working_dir: './infra'
         tf_actions_comment: false
     # env:
     #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: $TF_VERSION
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: './infra'
        tf_actions_comment: false
     # env:
     #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: $TF_VERSION
        tf_actions_subcommand: 'validate'
        tf_actions_working_dir: './infra'
        tf_actions_comment: false
     # env:
     #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: $TF_VERSION
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: './infra'
        tf_actions_comment: false
     # env:
     #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: $TF_VERSION
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: './infra'
        tf_actions_comment: false
        # args: '-var="client_secret=${{ secrets.clientSecret }}"'

    # Set the target AKS cluster.
    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: aks-k8s
        resource-group: aks-k8s
        
    #- uses: Azure/k8s-create-secret@v1
    #  with:
    #    container-registry-url: contoso.azurecr.io
    #    container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
    #    container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
    #    secret-name: demo-k8s-secret

    - uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          kubernetes/mssql-pv.azure.yaml
          kubernetes/mssql-secret.yaml
          kubernetes/mssql-deployment.yaml
          kubernetes/mvc-deployment.azure.yaml
          kubernetes/mssql-configmap.yaml
       # images: |
       #   demo.azurecr.io/k8sdemo:${{ github.sha }}
       # imagepullsecrets: |
       #   demo-k8s-secret
     
    - name: Run Kube Advisor to check for Resource Limits
      continue-on-error: true
      run:
        kubectl run --rm -i -t kubeadvisor --image=mcr.microsoft.com/aks/kubeadvisor --restart=Never > PodResourceLimits.txt
